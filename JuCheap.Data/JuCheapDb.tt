<#@ template  language="C#"    debug="true" hostspecific="True"#> 
<#@ include file="MultipleOutputHelper.ttinclude" #>
<#@ import namespace="System"#>

<#
	string solutionsPath = Host.ResolveAssemblyReference("$(SolutionDir)");  
    string projectPath = Host.ResolveAssemblyReference("$(ProjectDir)");  
	var path = projectPath+@"\Entity";
    var files = System.IO.Directory.GetFiles(path, "*.cs");

    var manager = Manager.Create(Host, GenerationEnvironment);
	manager.StartNewFile("JuCheapContext.cs", string.Empty);
#>

/*******************************************************************************
* Copyright (C) JuCheap.Com
* 
* Author: dj.wong
* Create Date: 2015/8/21
* Description: Automated building by service@jucheap.com 
* 
* Revision History:
* Date         Author               Description
*
*********************************************************************************/

using System.Data.Entity;
using System.Data.Entity.ModelConfiguration.Conventions;
using System.Diagnostics;
using JuCheap.Data.Config;
using JuCheap.Data.Entity;
using EntityFramework.DynamicFilters;
using JuCheap.Infrastructure.Utilities;

namespace JuCheap.Data
{
    /// <summary>
    /// JuCheapContext
    /// </summary>
    public class JuCheapContext : DbContext
    {
		#region DbSet
<#
	foreach (var filePath in files)
    {
		var file = new FileInfo(filePath);
		if(file.Name != "BaseEntity.cs")
		{
			var name = file.Name.Replace("Entity.cs",string.Empty);
#>
		/// <summary>
        /// <#=name#>
        /// </summary>
        public DbSet<<#=name#>Entity> <#=name#>s { get; set; }
<#
		}
	}
#>
		#endregion

        /// <summary>
        /// JuCheapContext
        /// </summary>
        public JuCheapContext() : base("JuCheap")
        {
            //SQL语句拦截器
            //System.Data.Entity.Infrastructure.Interception.DbInterception.Add(new SqlCommandInterceptor());
#if DEBUG
            Database.Log += WriteSql;
#endif
        }

        /// <summary>
        /// 带参数构造函数
        /// </summary>
        /// <param name="connectionString">数据库连接字符串名称</param>
        public JuCheapContext(string connectionString) : base(connectionString)
        {
        }

        /// <summary>
        /// OnModelCreating
        /// </summary>
        /// <param name="modelBuilder"></param>
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            //移除一对多的级联删除关系
            modelBuilder.Conventions.Remove<OneToManyCascadeDeleteConvention>();
            //移除表名复数形式
            modelBuilder.Conventions.Remove<PluralizingEntitySetNameConvention>();

            //配置实体和数据表的关系
            modelBuilder.Configurations.AddFromAssembly(typeof(UserConfig).Assembly);

            //全局过滤器
            modelBuilder.Filter(EfFilter.IsDeletedFilterName, (IsDeleteFilter b, bool isDeleted) => b.IsDeleted == isDeleted, false);
        }

		private void WriteSql(string result)
		{
			Debug.WriteLine(result);
		}
    }
}


<# 
    // 结束输出文件
    manager.EndBlock();
    // 执行编译
    manager.Process(true);  
#> 